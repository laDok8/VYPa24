from src.sym_table import Symbol

# use modified cdecl calling convention
# args are pushed on stack from RTL, caller cleans up, return value on stack

SP = '$SP'
BP = '$BP'  # - 0
AX = '$AX'  # return values, arithmetics
BX = '$BX'  # index
CX = '$CX'  # iterator
DX = '$DX'  # I/O & AX extension div/mul ?
EX = '$EX'  # misc
SI = '$SI'  # string src
DI = '$DI'  # string dest


# WARN: for some reason, stack grows up


def read_string():
    return f'''
LABEL readString
\tREADS {AX}
\tSET [{SP}-1] {AX}
\tRETURN [{SP}]
'''


def read_int():
    return f'''
LABEL readInt
\tREADI {AX}
\tSET [{SP}-1] {AX}
\tRETURN [{SP}]
'''


def length():
    return f'''
LABEL length
\tGETSIZE {AX} [{SP}-2]
\tSUBI {SP}, {SP}, 1
\tSET [{SP}-1] {AX}
\tRETURN [{SP}+1]
'''


def PUSH(x=None):
    if x is None:
        return f'\tADDI {SP}, {SP}, 1'
    else:
        return f'''\tSET [{SP}] {x}
\tADDI {SP}, {SP}, 1'''


class CodeGenerator:
    def __init__(self):
        self.header = '''#! /bin/vypint
# VYPcode: 1.0
# Generated by xdokou14\n'''
        self.alias = '''
ALIAS BP $0
ALIAS AX $1
ALIAS BX $2
ALIAS CX $3
ALIAS DX $4
ALIAS EX $5
ALIAS SI $6
ALIAS DI $7\n'''
        self.body = ''
        self.variables = []

    def get_var_offset(self, symbol: str):
        return self.variables.index(symbol)

    def generate_code(self):
        print(self.header)
        print(self.alias)
        print("JUMP main")
        print(self.body)
        print("LABEL _end")
        pass

    def declaration(self, symbol: Symbol):
        _name = symbol.name
        self.variables.append(_name)
        _type = symbol.data_type
        self.body += f'\t# declaration of {_name}\n'
        self.body += f'\tSET [{BP}+{self.get_var_offset(_name)}] 0\n'
        self.body += f'{PUSH()}\n\n'

    def print(self, symbol: [Symbol]):
        self.body += f'\t# print\n'

        for acc, s in enumerate(symbol, -len(symbol)):
            if s.data_type == 'int':
                self.body += f'\tWRITEI [{SP}{acc}]\n'
            else:
                self.body += f'\tWRITES [{SP}{acc}]\n'

    def literal(self, symbol: Symbol):
        if symbol.data_type == 'int':
            self._int_literal(symbol.name)
        else:
            self._string_literal(symbol.name)

    def _string_literal(self, value):
        self.body += f'\t# string literal {value}\n'
        self.body += f'\tCREATE {DI} 1\n'
        self.body += f'\tSETWORD {DI} 0 {value}\n'
        self.body += f'\tGETWORD {DI} {DI} 0\n'
        self.body += f'{PUSH(DI)}\n\n'

    def _int_literal(self, value):
        self.body += f'\t# int literal {value}\n'
        self.body += f'{PUSH(value)}\n\n'

    def restore_stack(self):
        _vars = len(self.variables)
        self.body += f'\t# restore stack\n'
        self.body += f'\tADDI {SP} {BP} {_vars}\n\n'

    def function_def(self, fun_name):
        self.body += f'\t# function {fun_name}\n'
        self.body += f'\tLABEL {fun_name}\n'
        self.body += f'{PUSH()}\n'
        self.body += f'\tSET {BP} {SP}\n\n'

    def exit_function(self):
        self.body += f'\t# exit function\n'
        self.body += f'\tSET {SP} {BP}\n'
        self.body += f'\tJUMP _end\n\n'
