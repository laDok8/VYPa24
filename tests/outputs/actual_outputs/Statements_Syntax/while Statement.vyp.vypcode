#! /bin/vypint
# VYPcode: 1.0
# Generated by xdokou14

ALIAS BP $0
ALIAS AX $1
ALIAS BX $2
ALIAS CX $3
ALIAS DX $4
ALIAS EX $5
ALIAS SI $6
ALIAS DI $7
SET $BP $SP
CALL [$SP+1] main
JUMP _end

# VMT for Object
CREATE $AX 2
SETWORD $AX 0 "toString"
SETWORD $AX 1 "getClass"
ADDI $SP, $SP, 1
SET [$SP] $AX



LABEL main
	ADDI $SP, $SP, 1 # space for PC
	ADDI $SP, $SP, 1
	SET [$SP] $BP
	SET $BP $SP
	# declare a
	SET [$BP+1] 0
	ADDI $SP, $SP, 1

	# restore stack
	ADDI $SP $BP 1

	# int literal 3
	ADDI $SP, $SP, 1
	SET [$SP] 3

	# assign var a
	SET [$BP+1] [$SP]

	# restore stack
	ADDI $SP $BP 1

	# push object ref a
	ADDI $SP, $SP, 1
	SET [$SP] [$BP+1]

	# int literal 0
	ADDI $SP, $SP, 1
	SET [$SP] 0

	# binary operation: >
	GTS $AX [$SP] [$SP-1]

	SUBI $SP, $SP, 1
	SET [$SP] $AX

	# push object ref a
	ADDI $SP, $SP, 1
	SET [$SP] [$BP+1]

	# string literal "\n"
	CREATE $DI 1
	SETWORD $DI 0 "\n"
	GETWORD $DI $DI 0
	ADDI $SP, $SP, 1
	SET [$SP] $DI

	# print
	WRITEI [$SP-1]
	WRITES [$SP]
	# restore stack
	ADDI $SP $BP 1

	# push object ref a
	ADDI $SP, $SP, 1
	SET [$SP] [$BP+1]

	# int literal 1
	ADDI $SP, $SP, 1
	SET [$SP] 1

	# binary operation: -
	SUBI $AX [$SP] [$SP-1]

	SUBI $SP, $SP, 1
	SET [$SP] $AX

	# assign var a
	SET [$BP+1] [$SP]

	# restore stack
	ADDI $SP $BP 1

	# restore stack
	ADDI $SP $BP 1

	# exit function
	SET $SP $BP
	SET $BP [$SP]
	SUBI $SP, $SP, 1
	SUBI $SP, $SP, 1
	RETURN [$SP+1]

LABEL _end
